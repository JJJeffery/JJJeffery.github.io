<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Always Hungry</title>
  
  <subtitle>Always Sleeping</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jfchen.top/"/>
  <updated>2019-12-05T03:19:43.953Z</updated>
  <id>https://jfchen.top/</id>
  
  <author>
    <name>Jianfeng Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些你想耍流氓时，能帮你优雅一点的工具</title>
    <link href="https://jfchen.top/2019/11/30/%E4%B8%80%E4%BA%9B%E4%BD%A0%E6%83%B3%E8%80%8D%E6%B5%81%E6%B0%93%E6%97%B6%EF%BC%8C%E8%83%BD%E5%B8%AE%E4%BD%A0%E4%BC%98%E9%9B%85%E4%B8%80%E7%82%B9%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
    <id>https://jfchen.top/2019/11/30/%E4%B8%80%E4%BA%9B%E4%BD%A0%E6%83%B3%E8%80%8D%E6%B5%81%E6%B0%93%E6%97%B6%EF%BC%8C%E8%83%BD%E5%B8%AE%E4%BD%A0%E4%BC%98%E9%9B%85%E4%B8%80%E7%82%B9%E7%9A%84%E5%B7%A5%E5%85%B7/</id>
    <published>2019-11-30T04:52:51.000Z</published>
    <updated>2019-12-05T03:19:43.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新浪微热点"><a href="#新浪微热点" class="headerlink" title="新浪微热点 "></a><a href="http://www.wrd.cn/" target="_blank" rel="noopener">新浪微热点 </a></h2><p>提供全网热度<br>提供全网关键词词云</p><h2 id="极其厉害的抠图工具"><a href="#极其厉害的抠图工具" class="headerlink" title="极其厉害的抠图工具"></a><a href="https://www.remove.bg/zh" target="_blank" rel="noopener">极其厉害的抠图工具</a></h2><p>人物抠图十分好用<br>可以在线使用，也可以利用Python，使用他们的API</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新浪微热点&quot;&gt;&lt;a href=&quot;#新浪微热点&quot; class=&quot;headerlink&quot; title=&quot;新浪微热点 &quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.wrd.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;新浪微热点 &lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Help" scheme="https://jfchen.top/categories/Help/"/>
    
    
      <category term="工具" scheme="https://jfchen.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化-动态柱状图</title>
    <link href="https://jfchen.top/2019/11/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8A%A8%E6%80%81%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
    <id>https://jfchen.top/2019/11/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%8A%A8%E6%80%81%E6%9F%B1%E7%8A%B6%E5%9B%BE/</id>
    <published>2019-11-21T13:22:10.000Z</published>
    <updated>2019-11-25T01:30:36.838Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就是可以看中国GDP噌噌噌往上涨的那种动态柱状图~</p></blockquote><a id="more"></a><p>虽然除了看房价噌噌噌往上涨，暂时也想不到能怎么玩。</p><p>但是确实很好看，那就拿来玩玩了。</p><p>特别鸣谢<a href="https://github.com/Jannchie/Historical-ranking-data-visualization-based-on-d3.js.git" target="_blank" rel="noopener">见齐</a>大佬免费开源他的框架。</p><h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><p>原生框架使用.csv文件，并且格式有点反人类……<br>如下：<br><img src="http://q0zymd4jt.bkt.clouddn.com/csv%E6%A0%BC%E5%BC%8F.jpg" alt=".csv文件中的规范数据格式"></p><p>不敢乱改原生框架，所以写了个小工具，利用.xlsx文件来生成规范的.csv文件。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Save2Local(statistics, root, jud = 0):</span><br><span class="line">    with open(root, &apos;a&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">        if jud == 0:</span><br><span class="line">            f.write(str(statistics) + &apos;\n&apos;)</span><br><span class="line">        elif jud == 1:</span><br><span class="line">            f.write(str(statistics) + &apos;\t&apos;)</span><br><span class="line">        else:</span><br><span class="line">            f.write(str(statistics))</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Formal2Csv(object):</span><br><span class="line">    def file_load(self, file_name):</span><br><span class="line">        data_col = []</span><br><span class="line">        workbook = xlrd.open_workbook(file_name)</span><br><span class="line">        table = workbook.sheets()[0]</span><br><span class="line">        for row in range(table.nrows):</span><br><span class="line">            data_col.append(table.row_values(row))</span><br><span class="line">        self.data = data_col</span><br><span class="line">        return data_col</span><br><span class="line"></span><br><span class="line">    def formalcsv(self, output_file_name):</span><br><span class="line">        date0 = self.data[0][1:]</span><br><span class="line">        title = &quot;name,type,value,date&quot;</span><br><span class="line">        Save2Local(title, output_file_name)</span><br><span class="line">        for data_line in self.data[1:]:</span><br><span class="line">            item_name = data_line[0]</span><br><span class="line">            num = 0</span><br><span class="line">            for item_data in data_line[1:]:</span><br><span class="line">                Save2Local(str(item_name) + &quot;,&quot; + &quot;&quot; + &quot;,&quot; +str(item_data) + &quot;,&quot; + str(date0[num]), output_file_name)</span><br><span class="line">                num += 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    file_name = &quot;city_data.xlsx&quot;</span><br><span class="line">    output_file_name = &quot;city_data.csv&quot;</span><br><span class="line">    pre_data = Formal2Csv()</span><br><span class="line">    pre_data.file_load(file_name)</span><br><span class="line">    pre_data.formalcsv(output_file_name)</span><br></pre></td></tr></table></figure><p>原数据必须为.xlsx文件，如果是.xls就用正经的Excel另存为.xlsx，千万别手动更改后缀名，否则会造成奇奇怪怪的后果。<br>.xlsx文件中的数据格式也得存储为如下格式：</p><p><img src="http://q0zymd4jt.bkt.clouddn.com/xlsx%E6%A0%BC%E5%BC%8F.jpg" alt=".xlsx文件中的数据格式"></p><p>然后再在上面列出的代码中，修改file_name和outpur_file_name就可以了。</p><p>如果Python生成的.CSV文件中，日期是一堆奇怪的数值，那就在.xlsx，将日期的格式，由<code>日期</code>改为<code>常规</code>即可。</p><h1 id="历史数据排名可视化"><a href="#历史数据排名可视化" class="headerlink" title="历史数据排名可视化"></a>历史数据排名可视化</h1><p>首先需要下载由<a href="https://github.com/Jannchie/Historical-ranking-data-visualization-based-on-d3.js.git" target="_blank" rel="noopener">见齐</a>大佬提供的框架，也可以下载<a href="http://q0zymd4jt.bkt.clouddn.com/%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.zip" target="_blank" rel="noopener">我</a>提供的修改过一些参数的版本（不分type，每页展示十条，内含2002-2017国内主要城市房价变化示例数据）</p><blockquote><p><strong>一句话用法</strong><br>只需打开src目录下的bargraph.html。然后点击页面中间的选择文件按钮，接着选择csv格式的数据文件，便可以看到可视化的结果。<br>对展示形式有其他要求的，可以用记事本/VS Code打开_config.js文件进行修改。</p></blockquote><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>原框架仅支持在本地选择数据，然后现场展示，对发布的支持不是特别好。因此推荐使用录屏软件录屏后发布。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;就是可以看中国GDP噌噌噌往上涨的那种动态柱状图~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="可视化" scheme="https://jfchen.top/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="工具" scheme="https://jfchen.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Python" scheme="https://jfchen.top/tags/Python/"/>
    
      <category term="编程" scheme="https://jfchen.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>当你第一次打开时或许你可以看一下</title>
    <link href="https://jfchen.top/2019/11/21/%E5%BD%93%E4%BD%A0%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%BC%80%E6%97%B6%E6%88%96%E8%AE%B8%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%B8%80%E4%B8%8B/"/>
    <id>https://jfchen.top/2019/11/21/%E5%BD%93%E4%BD%A0%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E5%BC%80%E6%97%B6%E6%88%96%E8%AE%B8%E4%BD%A0%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%B8%80%E4%B8%8B/</id>
    <published>2019-11-21T05:45:01.000Z</published>
    <updated>2019-11-21T05:54:28.715Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>希望你用电脑<br>用谷歌浏览器</p></blockquote><a id="more"></a><ul><li><p>如果你用手机打开，你可能会看不到随机乱跑的线条</p></li><li><p>如果你用Edge打开，你可能会看不到我精心画的纸飞机鼠标</p></li><li><p>如果哪天你在国内打不开了，那是腾讯云炸了；换国外IP访问，或者喊我一声</p></li><li><p>如果你要留言，希望你可以留下你的昵称</p></li><li><p>如果你要分享，每篇文章下面会有个分享按钮，也可以直接用微信打开分享</p></li><li><p>如果打开很慢，那是我优化不够，加载的插件比较多，但是我并不想继续优化</p></li><li><p>有两只皮卡丘，和一个小可爱</p></li><li><p>有一只皮卡丘会摇尾巴和动耳朵，希望你耐心等待加载</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;希望你用电脑&lt;br&gt;用谷歌浏览器&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于爬虫的两个得力工具</title>
    <link href="https://jfchen.top/2019/11/15/%E5%85%B3%E4%BA%8E%E7%88%AC%E8%99%AB%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BE%97%E5%8A%9B%E5%B7%A5%E5%85%B7/"/>
    <id>https://jfchen.top/2019/11/15/%E5%85%B3%E4%BA%8E%E7%88%AC%E8%99%AB%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%BE%97%E5%8A%9B%E5%B7%A5%E5%85%B7/</id>
    <published>2019-11-15T12:48:04.000Z</published>
    <updated>2019-11-16T10:24:39.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天与某在北京造超导核弹的<a href="https://camusecao.top" target="_blank" rel="noopener">小流氓</a>聊及爬虫的时候，发现他被反爬了。</p><p>我没有笑。</p><p>后来想起自己刚学爬虫的时候也曾被一些简单的反爬机制制裁过，索性就把我的祖传代码贴出来，供大家参考交流。对于初学者也可以直接复制使用。</p><p>当然我也是个初学者。</p></blockquote><a id="more"></a><h2 id="get-html-text-url"><a href="#get-html-text-url" class="headerlink" title="get_html_text(url)"></a>get_html_text(url)</h2><p>这是我每只爬虫的第一步，几行非常简单的代码，但也修修补补了好几回才成为今天最顺手的一个工具。</p><p>这也应该是我写的第一段正经工作代码，陪着我撸过无数个网页，测试了无数次。</p><p>可靠性 += 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_html_text(url):</span><br><span class="line">    try:</span><br><span class="line">        kv = &#123;&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &apos;</span><br><span class="line">                            &apos;Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134&apos;&#125;</span><br><span class="line">        r = requests.get(url, headers=kv, timeout=30)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        return r.text</span><br><span class="line">    except:</span><br><span class="line">        return &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p># kv 模拟正常使用浏览器打开网页时，浏览器自动向网站服务器发送的headers，以此应对网站最基本的反爬机制</p><p># 一般来说，只要不是恶意攻击，或者点击速度过快，或者持续点击同一个页面，此方法足以因对大部分网站</p><p># timeout 30s内打不开网页即当做该网页无响应，避免爬虫程序卡在某一步</p><p># 正常打开的网页，本函数返回html</p><p># 无法打开的网页或响应超时的网页，本函数返回为空</p><p>使用时，将网址以文本形式(<em>就是用两个英文引号”括起来，并且一定要加上<code>http://</code>，平时自己使用浏览器时可以不用加，但爬虫程序并不会帮你加</em>)作为参数输入get_html_text(url)</p><h2 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep()"></a>time.sleep()</h2><p>当你要爬携程、美团这两家的网站的时候，请<strong>千万千万千万</strong>用上这个函数！！！</p><p>来自一个被携程和美团双双封过的人的忠告！</p><p>哪一步都可以省，这一步千万不能省！！</p><p>否则你就会体验到，你连正常的打开美团想买个套餐都不行的滋味。</p><p>显然正经的爬虫应该在任何时候都加这一句。</p><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><p>当你使用for语句时，在for循环的最后一行写上这函数，需要提前 <code>import time</code>，这是Python自带的一个库，不用另外安装。</p><p>括号内写上sleep的时间，以秒为单位。</p><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p>如果你问我，这个世界上有没有一个网站我可以全力爬取，不用sleep。</p><p>那我只能回答你，有。</p><p>如果你问我，那你可以不可以告诉我这个网站。</p><p>那我也只能回答你，可以。</p><p>如果你问我，那你为什么不告诉我。</p><p>那样我就只能告诉你了：</p><p>所有以<code>xmu.edu.cn</code>结尾的网站，你随便爬，一只不够放两只，单线程不够你就多线程，唯一能限制你的应该是vpn的速度。</p><p>不过你没事干啥要去爬这个网站呢？</p><p>还有一个网站也是不限制的，但我这边不能说。</p><p>说了我号可能就没了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天与某在北京造超导核弹的&lt;a href=&quot;https://camusecao.top&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小流氓&lt;/a&gt;聊及爬虫的时候，发现他被反爬了。&lt;/p&gt;
&lt;p&gt;我没有笑。&lt;/p&gt;
&lt;p&gt;后来想起自己刚学爬虫的时候也曾被一些简单的反爬机制制裁过，索性就把我的祖传代码贴出来，供大家参考交流。对于初学者也可以直接复制使用。&lt;/p&gt;
&lt;p&gt;当然我也是个初学者。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://jfchen.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="爬虫" scheme="https://jfchen.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https://jfchen.top/tags/Python/"/>
    
      <category term="编程" scheme="https://jfchen.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
